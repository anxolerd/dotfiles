{# vim: set ft=vim :#}
" ========== Vim-Plug ========== "
if empty(glob('{{ vim.plug.bundle_path }}'))
  silent !curl -fLo {{ vim.plug.bundle_path }} --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync| source $MYVIMRC
endif


call plug#begin('~/.vim/plugged')
Plug 'airblade/vim-gitgutter', {'on':'GitGutterEnable'}         " git integration
Plug 'catppuccin/vim', { 'as': 'catppuccin' }                   " theme
Plug 'christoomey/vim-tmux-navigator'
Plug 'editorconfig/editorconfig-vim'                            " respect editorconfig files
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }             " fuzzy search
Plug 'junegunn/fzf.vim'                                         " fuzzy search
Plug 'neoclide/coc.nvim', {'branch': 'release'}                 " Language Server Client
Plug 'preservim/nerdtree',
     \ {'on':['NERDTree','NERDTreeToggle','NERDTreeFind','NERDTreeFocus']}
                                                                " cool tree view
Plug 'rust-lang/rust.vim'                                       " rust syntax support
Plug 'ryanoasis/vim-devicons'                                   " cool icons
Plug 'sheerun/vim-polyglot'                                     " languages support
Plug 'tiagofumo/vim-nerdtree-syntax-highlight',
     \ {'on':['NERDTree','NERDTreeToggle','NERDTreeFind','NERDTreeFocus']}
                                                                " Icons for
                                                                " file types
                                                                " in NERD TREE
Plug 'tpope/vim-fugitive'                                       " git operations commands
Plug 'vim-airline/vim-airline'                                  " status line
Plug 'vim-airline/vim-airline-themes'                           " themes for status line
Plug 'xuyuanp/nerdtree-git-plugin',
     \ {'on':['NERDTree','NERDTreeToggle','NERDTreeFind','NERDTreeFocus']}
                                                                " highlight
                                                                " git changes
                                                                " in tree

Plug '{{ vim.plug.self_plugin }}'
call plug#end()

"


" ========== General config ========== "
set mouse=a                                                     " enable mouse integration
set tabstop=4 softtabstop=4 shiftwidth=4 autoindent             " tab width
set expandtab smarttab                                          " tab key actions
set incsearch ignorecase smartcase hlsearch                     " highlight text while searching
set list listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·  " highlight ivisible chars
set encoding=utf-8                                              " encoding
set number                                                      " display line numbers
set relativenumber                                              " line numbers relative to current line
set title                                                       " tab title as file name
set emoji                                                       " better display for unicode characters
set splitright                                                  " open vertical split to the right
set splitbelow                                                  " open horizontal split to the bottom
set foldlevel=0                                                 " open all folds by default
set showtabline=2                                               " always show tabline
set grepprg=rg\ --vimgrep                                       " use rg as default grepper
set modeline                                                    " enable modeline
set modelines=1                                                 " enable modeline

" performance tweaks
set nocursorline                                                " disable cursor row highlighting
set nocursorcolumn                                              " disable cursor column highlighting
set scrolljump=5                                                " scroll 5 lines at once
set lazyredraw
set synmaxcol=180                                               " check and highlight syntax max to 180 column
set re=1                                                        " use old but fast regex engine

" Plugins requirements
set termguicolors                                               " for catpuccin theme to work correctly

" ========== CoC Configuration ========== "
let g:coc_global_extensions = [
{% for extension in vim.coc.extensions %}
  \ '{{ extension }}',
{% endfor -%}
  \ ]

let g:coc_filetype_map = {
  \ 'yaml.ansible': 'ansible',
  \ }

" Some servers have issues with backup files
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
" delays and poor user experience
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s)
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying code actions at the cursor position
nmap <leader>ac  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer
nmap <leader>as  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Run the Code Lens action on the current line
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)


" ========== NERDTree-related Configuration ========== "
let g:NERDTreeMinimalUI=1
let g:NERDTreeDirArrows=0
let g:NERDTreeShowHidden=0
let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeRespectWildIgnore=1
let g:NERDTreeIgnore=['\.git$','\.svn$','\.hg$','\.DS_Store$','\.devcontainer$','\.vscode$','__pycache__$','\.terraform$','\.terraform.lock.hcl$','\.terragrunt-cache$','\.pyc$']
let g:WebDevIconsOS='Darwin'
let g:webdevicons_enable=1
let g:webdevicons_enable_nerdtree=1
let g:WebDevIconsUnicodeDecorateFileNodes=1
let g:webdevicons_conceal_nerdtree_brackets=1
let g:WebDevIconsUnicodeDecorateFolderNodes=1

" Start NERDTree when Vim starts with a directory argument.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
    \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif

" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif

" Automatically source the Vimrc file on save.
augroup autosourcing
    autocmd!
    autocmd BufWritePost .vimrc source %
augroup END

" Toggle IDE mode in VIM
nmap <C-i> :GitGutterEnable<cr>:NERDTreeFind<cr>

" ========== Theme configuration ========== "
let g:airline_theme = 'catppuccin_{{ catppuccin.theme }}'
colorscheme catppuccin_{{ catppuccin.theme }}
