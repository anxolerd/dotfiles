{# vim: set ft=vim :#}
" ========== Vim-Plug ========== "
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync| source $MYVIMRC
endif


call plug#begin('~/.vim/plugged')
Plug 'airblade/vim-gitgutter', {'on':'GitGutterEnable'}         " git integration
Plug 'dense-analysis/ale'                                       " completion and lints
Plug 'editorconfig/editorconfig-vim'                            " respect editorconfig files
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }             " fuzzy search
Plug 'junegunn/fzf.vim'                                         " fuzzy search
Plug 'preservim/nerdtree',
     \ {'on':['NERDTree','NERDTreeToggle','NERDTreeFind','NERDTreeFocus']}
                                                                " cool tree view
Plug 'rust-lang/rust.vim'                                       " rust syntax support
Plug 'ryanoasis/vim-devicons'                                   " cool icons
Plug 'tiagofumo/vim-nerdtree-syntax-highlight',
     \ {'on':['NERDTree','NERDTreeToggle','NERDTreeFind','NERDTreeFocus']}
                                                                " Icons for
                                                                " file types
                                                                " in NERD TREE
Plug 'tpope/vim-fugitive'                                       " git operations commands
Plug 'vim-airline/vim-airline'                                  " status line
Plug 'vim-airline/vim-airline-themes'                           " themes for status line
Plug 'xuyuanp/nerdtree-git-plugin',
     \ {'on':['NERDTree','NERDTreeToggle','NERDTreeFind','NERDTreeFocus']}
                                                                " highlight
                                                                " git changes
                                                                " in tree
call plug#end()

"


" ========== General config ========== "
set mouse=a                                                     " enable mouse integration
set tabstop=4 softtabstop=4 shiftwidth=4 autoindent             " tab width
set expandtab smarttab                                          " tab key actions
set incsearch ignorecase smartcase hlsearch                     " highlight text while searching
set list listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·  " highlight ivisible chars
set encoding=utf-8                                              " encoding
set number                                                      " display line numbers
set relativenumber                                              " line numbers relative to current line
set title                                                       " tab title as file name
set emoji                                                       " better display for unicode characters
set splitright                                                  " open vertical split to the right
set splitbelow                                                  " open horizontal split to the bottom
set foldlevel=0                                                 " open all folds by default
set showtabline=2                                               " always show tabline
set grepprg=rg\ --vimgrep                                       " use rg as default grepper
set modeline                                                    " enable modeline
set modelines=1                                                 " enable modeline

" performance tweaks
set nocursorline                                                " disable cursor row highlighting
set nocursorcolumn                                              " disable cursor column highlighting
set scrolljump=5                                                " scroll 5 lines at once
set lazyredraw
set synmaxcol=180                                               " check and highlight syntax max to 180 column
set re=1                                                        " use old but fast regex engine

" ========== ALE Configuration ========== "
set omnifunc=ale#completion#OmniFunc
let g:ale_completion_enabled = 1
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'rust': ['rustfmt'],
\}

" ========== NERDTree-related Configuration ========== "
let g:NERDTreeMinimalUI=1
let g:NERDTreeDirArrows=0
let g:NERDTreeShowHidden=0
let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeRespectWildIgnore=1
let g:NERDTreeIgnore=['\.git$','\.svn$','\.hg$','\.DS_Store$','\.devcontainer$','\.vscode$','__pycache__$','\.terraform$','\.terraform.lock.hcl$','\.terragrunt-cache$','\.pyc$']
let g:WebDevIconsOS='Darwin'
let g:webdevicons_enable=1
let g:webdevicons_enable_nerdtree=1
let g:WebDevIconsUnicodeDecorateFileNodes=1
let g:webdevicons_conceal_nerdtree_brackets=1
let g:WebDevIconsUnicodeDecorateFolderNodes=1

" Start NERDTree when Vim starts with a directory argument.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
    \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif

" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif

" Automatically source the Vimrc file on save.
augroup autosourcing
    autocmd!
    autocmd BufWritePost .vimrc source %
augroup END

" Toggle IDE mode in VIM
nmap <C-i> :GitGutterEnable<cr>:NERDTreeFind<cr>
