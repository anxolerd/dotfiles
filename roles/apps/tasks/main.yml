--- # vim: se ft=ansible:
- name: Ensure portage dirs structure exists
  file:
    dest: /etc/portage/package.{{ setting_type }}
    mode: u=rwx,g=rx,o=rx
    owner: root
    group: root
    state: directory
    recurse: yes
  loop:
  - accept_keywords
  - license
  - mask
  - unmask
  - use
  loop_control:
    loop_var: setting_type

- name: Accept package licenses
  lineinfile:
    create: true
    line: >-
      {{ license_entry.package }}
      {{ license_entry.licenses }}
    path: >-
      /etc/portage/package.license/{{
          license_entry.package | replace('/', '--')
      }}
    state: present
  loop: >-
    {{
        accept_licenses |
        dict2items(key_name='package', value_name='licenses')
    }}
  loop_control:
    label: >-
      Accepting {{ license_entry.licenses }} terms
      for {{ license_entry.package }}
    loop_var: license_entry

- name: Mask third-party overlays
  lineinfile:
    create: yes
    line: >-
      */*::{{ overlay }}
    path: >-
      /etc/portage/package.mask/third-party-overlay--{{ overlay }}
    state: present
  loop: >-
    {{ layman_overlays }}
  loop_control:
    loop_var: overlay

- name: Allow certain packages from third-party overlays
  lineinfile:
    create: yes
    line: >-
      {{
        [overlay_package_entry.package, overlay_package_entry.overlay]
        | join('::')
      }}
    path: >-
      /etc/portage/package.unmask/third-party-overlay--{{
        overlay_package_entry.overlay
      }}
    state: present
  loop: >-
    {{
        ebuilds_from_overlays
        | combine(unmask_ebuilds)
        | dict2items(key_name='package', value_name='overlay')
    }}
  loop_control:
    label: >-
      Allowing {{
        [overlay_package_entry.package, overlay_package_entry.overlay]
        | join('::')
      }}
    loop_var: overlay_package_entry

- name: Install layman overlays
  shell: |
    set -euxo pipefail
    yes | layman -a {{ overlay }}
  args:
    creates: /var/lib/layman/{{ overlay }}
  loop: >-
    {{ layman_overlays }}
  loop_control:
    loop_var: overlay
  register: layman_cmd
  changed_when: layman_cmd.rc == 141
  failed_when: >-
    layman_cmd.rc not in [0, 141] and
    ' was already installed' not in layman_cmd.stdout

- name: Sync layman overlays
  command: layman -S
  when: true

- name: Set up global use flags
  lineinfile:
    create: no
    line: >-
      USE="{{ global_use_flags | sort | join(' ') }}"
    path: /etc/portage/make.conf
    regexp: ^USE="[^"]*"$
    state: present
  when: global_use_flags | length > 0

- name: Set up per-package use-flags
  lineinfile:
    create: true
    regexp: "^{{ flags_entry.package }} "
    line: "{{ flags_entry.package }} {{ flags_entry.use_flags | sort | join(' ') }}"
    state: present
    path: /etc/portage/package.use/{{ flags_entry.package.split('/', 1)[0] }}
  loop: >-
    {{
      package_use_flags |
      dict2items(key_name='package', value_name='use_flags')
    }}
  loop_control:
    label: "Setting USE flags for {{ flags_entry.package }}"
    loop_var: flags_entry

- name: Set up ABI_X86 targets
  lineinfile:
    create: no
    line: >-
      ABI_X86="{{ abi_x86_targets | join(' ') }}"
    path: /etc/portage/make.conf
    regexp: ^ABI_X86="[^"]*"$
    state: present
  when: abi_x86_targets | length > 0

- name: Merge essential ebuilds
  portage:
    package: >-
      {{ essential_ebuilds }}
    state: emerged
    update: yes
    verbose: yes
    newuse: yes
    loadavg: "{{ emerge_load_average }}"
    jobs: "{{ emerge_jobs_number }}"
  notify:
  - ensure-services-started
  - ensure-services-reloaded

- name: Set up Python targets
  lineinfile:
    create: no
    line: >-
      PYTHON_TARGETS="python{{
          python_targets | map('replace', '.', '_') | join(' python')
      }}"
    path: /etc/portage/make.conf
    regexp: ^PYTHON_TARGETS="[^"]*"$
    state: present
  when: python_targets | length > 0

- name: Set up Ruby targets
  lineinfile:
    create: no
    line: >-
      RUBY_TARGETS="ruby{{ ruby_targets | map('replace', '.', '') | join(' ruby')
      }}"
    path: /etc/portage/make.conf
    regexp: ^RUBY_TARGETS="[^"]*"$
    state: present
  when: ruby_targets | length > 0

- name: Set up graphics card targets
  lineinfile:
    create: no
    line: >-
      VIDEO_CARDS="{{ video_card_targets | join(' ') }}"
    path: /etc/portage/make.conf
    regexp: ^VIDEO_CARDS="[^"]*"$
    state: present
  when: video_card_targets | length > 0

- name: Merge ebuilds from the default Gentoo tree
  portage:
    package: >-
      {{
          ebuilds
          | map('regex_replace', '^(.*)$', '\1::gentoo')
          | list
      }}
    state: emerged
    update: yes
    verbose: yes
    newuse: yes
    loadavg: "{{ emerge_load_average }}"
    jobs: "{{ emerge_jobs_number }}"
  notify:
  - ensure-services-started
  - ensure-services-reloaded

- name: Merge ebuilds from third-party overlays
  portage:
    package: >-
      {{
          ebuilds_from_overlays.items()
          | map('join', '::')
          | list
      }}
    state: emerged
    update: yes
    verbose: yes
    newuse: yes
    loadavg: "{{ emerge_load_average }}"
    jobs: "{{ emerge_jobs_number }}"
  notify:
  - ensure-services-started
  - ensure-services-reloaded

- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Set up udev rules
  copy:
    src: etc/udev/rules.d/{{ udev_rule.file }}
    dest: /etc/udev/rules.d/{{ udev_rule.file }}
    mode: u+rw,g=r,o=r
    owner: root
    group: root
  loop:
  - label: make Android devices accessible by plugdev group
    file: 51-android.rules
  loop_control:
    label: >-
      {{ udev_rule.label }}
    loop_var: udev_rule
  notify:
  - update-udev-rules

- name: Configure lightdm
  block:
    - name: Ensure media path exist
      file:
        path: /usr/local/share/lightdm/backgrounds
        state: directory
        mode: u+rwx,g=rx,o=rx
        owner: root
        group: root
    - name: Copy media
      copy:
        src: "{{ path }}"
        dest: "/{{ path }}"
        mode: u+rw,g=r,o=r
        owner: root
        group: root
      loop:
        - etc/lightdm/lightdm-gtk-greeter.conf
        - usr/local/share/lightdm/backgrounds/crf1100l.jpg
      loop_control:
        loop_var: path
      notify:
        - ensure-services-started
        - ensure-services-reloaded

- name: Configure global look and feel
  block:
    - name: Configure GTK3.0
      template:
        src: etc/gtk-3.0/settings.ini.j2
        dest: /etc/gtk-3.0/settings.ini
        owner: root
        group: root
        mode: "0644"

- name: Configure podman
  block:
    - name: Copy recommended example configuration files
      copy:
        src: /etc/containers/{{ configuration_file }}.example
        dest: /etc/containers/{{ configuration_file }}
        remote_src: true
        owner: root
        group: root
        mode: "0644"
      loop:
        - policy.json
        - registries.conf
      loop_control:
        loop_var: "configuration_file"
  when: "'podman' in ansible_facts.packages"

- name: Add users to groups
  user:
    name: "{{ membership.user }}"
    groups: ["{{ membership.group }}"]
    append: true
  when: "membership.package in ansible_facts.packages"
  loop: "{{ groups_memberships }}"
  loop_control:
    loop_var: membership
    label: "Add user {{ membership.user }} to group {{ membership.group }}"
